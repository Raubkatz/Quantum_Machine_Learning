Ridge_RandomizedSearchCV for the wine dataset with n_iter=20
CV-score:
0.8746256111219701
test-score:
0.8781794751399887
runtime:
0:00:00.654056
best parameters:
{'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.00123305, 0.00078206, 0.00317516, 0.00992866, 0.00060177,
       0.00051165, 0.00059538, 0.00228758, 0.01289201, 0.00128708,
       0.0009088 , 0.00058284, 0.00068164, 0.00068445, 0.00163198,
       0.03194547, 0.00097938, 0.01669674, 0.00405426, 0.01630645]), 'std_fit_time': array([2.86571730e-04, 6.71271564e-05, 2.06723653e-04, 1.81704454e-02,
       1.20585509e-04, 5.42631468e-06, 3.23436223e-05, 4.04520947e-05,
       1.67532649e-04, 7.33409963e-05, 9.60439765e-05, 2.84130934e-05,
       2.03894588e-05, 2.96151578e-05, 4.65772525e-05, 2.24549549e-04,
       9.07779984e-05, 9.89382984e-05, 2.38263079e-05, 8.83739429e-05]), 'mean_score_time': array([0.00038228, 0.00029922, 0.00052853, 0.00052671, 0.00044866,
       0.00043426, 0.00044065, 0.00044994, 0.00065727, 0.00049586,
       0.00045943, 0.00045218, 0.00048337, 0.00049696, 0.00048127,
       0.0007206 , 0.00053144, 0.00069361, 0.00049086, 0.00061874]), 'std_score_time': array([1.35848019e-04, 4.07130703e-06, 2.55423645e-05, 1.02269332e-04,
       1.28837835e-05, 3.95975866e-06, 6.64157308e-07, 4.11684755e-06,
       8.05156733e-05, 2.72546538e-05, 7.16367493e-06, 5.99488808e-06,
       1.59577386e-05, 3.75790642e-05, 2.69151662e-05, 1.07771380e-04,
       1.86509782e-05, 3.37088460e-05, 1.41431862e-05, 4.37793645e-05]), 'param_tol': masked_array(data=[0.01, 0.001, 0.01, 0.0001, 0.0001, 0.0001, 0.001, 0.01,
                   0.0001, 0.0001, 0.01, 0.0001, 0.001, 0.01, 0.001,
                   0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['saga', 'sparse_cg', 'sag', 'svd', 'auto', 'cholesky',
                   'svd', 'saga', 'sag', 'sparse_cg', 'sparse_cg', 'auto',
                   'svd', 'svd', 'sparse_cg', 'saga', 'svd', 'saga',
                   'saga', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_random_state': masked_array(data=[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
                   42, 42, 42, 42, 42, 42],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_normalize': masked_array(data=[True, False, False, True, True, False, True, True,
                   False, True, False, False, True, True, True, False,
                   True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[1000, 100, 1000, 1000, 100, 100, 1000, 1000, 500, 1000,
                   1000, 100, 100, 500, 100, 1000, 100, 500, 100, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, False, False, False, False,
                   True, False, True, False, False, False, True, True,
                   True, True, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_copy_X': masked_array(data=[False, False, True, True, True, True, False, True,
                   False, False, True, False, True, True, False, False,
                   True, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.1, 0.1, 0.1, 1, 10, 0.001, 0.1, 0.001, 0.1, 10,
                   100, 0.001, 1, 0.01, 10, 1, 100, 10, 0.1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'cholesky', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 10}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.0001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 10}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 100}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 100}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}], 'split0_test_score': array([0.92055593, 0.90168682, 0.51810129, 0.91396194, 0.88308271,
       0.88384028, 0.88153561, 0.17083618, 0.72658477, 0.87087303,
       0.44052178, 0.86094605, 0.88153561, 0.88308271, 0.92019771,
       0.72588349, 0.81560721, 0.62045953, 0.25477579, 0.37097407]), 'split1_test_score': array([ 0.83524522,  0.80815978,  0.26563364,  0.83626237,  0.75182857,
        0.74862293,  0.75092607,  0.00587447,  0.46324065,  0.76278158,
        0.59537975,  0.67366221,  0.75092607,  0.75182857,  0.83559503,
        0.4624688 ,  0.77243941,  0.35551411, -0.09080608, -0.00342697]), 'split2_test_score': array([0.91718197, 0.88208358, 0.43793738, 0.9068649 , 0.9041518 ,
       0.89879311, 0.90215389, 0.27570148, 0.65177924, 0.88181969,
       0.35533454, 0.86945804, 0.90215389, 0.9041518 , 0.91853141,
       0.65094306, 0.83864762, 0.53925617, 0.39598146, 0.47270374]), 'split3_test_score': array([0.87158661, 0.8679128 , 0.42131528, 0.86714506, 0.85281018,
       0.84300236, 0.85153071, 0.16846545, 0.5901639 , 0.83435418,
       0.35221041, 0.77577425, 0.85153071, 0.85281018, 0.87301135,
       0.58956112, 0.81325243, 0.50219502, 0.29668454, 0.37722037]), 'split4_test_score': array([0.82505722, 0.84099923, 0.47454605, 0.84889379, 0.77746308,
       0.82988441, 0.7497689 , 0.33551025, 0.67529223, 0.81656528,
       0.38261127, 0.81513174, 0.7497689 , 0.77746308, 0.8162039 ,
       0.67453489, 0.81271586, 0.57518647, 0.39956138, 0.47806694]), 'mean_test_score': array([0.87392539, 0.86016844, 0.42350673, 0.87462561, 0.83386727,
       0.84082862, 0.82718303, 0.19127757, 0.62141216, 0.83327875,
       0.42521155, 0.79899446, 0.82718303, 0.83386727, 0.87270788,
       0.62067827, 0.81053251, 0.51852226, 0.25123942, 0.33910763]), 'std_test_score': array([0.03983783, 0.0326692 , 0.08566224, 0.03090807, 0.05938466,
       0.05260471, 0.06476992, 0.11246601, 0.09042254, 0.04247329,
       0.09079468, 0.07114897, 0.06476992, 0.05938466, 0.04224982,
       0.09042472, 0.02135164, 0.09041036, 0.18001253, 0.1771754 ]), 'rank_test_score': array([ 2,  4, 17,  1,  7,  5,  9, 20, 13,  8, 16, 12,  9,  6,  3, 14, 11,
       15, 19, 18], dtype=int32)}