MLP_RandomizedSearchCV for the wine dataset with n_iter=20
CV-score:
0.9504926108374384
test-score:
0.9722222222222222
runtime:
0:00:16.178315
best parameters:
{'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.08381548, 0.03778901, 0.01291828, 0.02276568, 0.17102766,
       0.09526029, 0.04734497, 0.37471952, 0.33002748, 0.09041696,
       0.12257714, 0.21953001, 0.30836139, 0.07978745, 0.15475349,
       0.31768389, 0.39832473, 0.10749402, 0.04537873, 0.09506369]), 'std_fit_time': array([0.0567775 , 0.05485846, 0.00600395, 0.00662767, 0.01552958,
       0.06391424, 0.02536928, 0.02648428, 0.01030337, 0.06177188,
       0.07430719, 0.02016385, 0.00291225, 0.12305674, 0.06309172,
       0.03541228, 0.03038099, 0.10826117, 0.02900557, 0.06630959]), 'mean_score_time': array([0.00061727, 0.00045004, 0.00050216, 0.00067544, 0.00058789,
       0.00056462, 0.00061178, 0.00064964, 0.00060458, 0.00052609,
       0.00041161, 0.00054984, 0.00059471, 0.00056238, 0.00066786,
       0.00068741, 0.00071011, 0.00065041, 0.00101519, 0.00064049]), 'std_score_time': array([9.92354149e-05, 1.13678779e-04, 1.13762933e-04, 8.69113391e-05,
       1.08617957e-04, 1.80777538e-04, 3.30028501e-05, 1.06074288e-04,
       1.09350873e-04, 1.02433856e-04, 2.23481525e-05, 1.06201645e-04,
       1.97790306e-05, 2.18573540e-05, 3.38888004e-05, 3.73900540e-05,
       1.73339325e-05, 5.34997692e-05, 6.71432403e-04, 2.95391287e-05]), 'param_solver': masked_array(data=['adam', 'adam', 'sgd', 'sgd', 'adam', 'adam', 'sgd',
                   'adam', 'adam', 'adam', 'sgd', 'adam', 'adam', 'adam',
                   'adam', 'adam', 'adam', 'adam', 'sgd', 'sgd'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[200, 200, 400, 300, 200, 200, 300, 400, 300, 200, 400,
                   300, 400, 400, 200, 300, 300, 300, 200, 400],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=['invscaling', 'constant', 'invscaling', 'invscaling',
                   'constant', 'constant', 'constant', 'adaptive',
                   'adaptive', 'constant', 'adaptive', 'constant',
                   'invscaling', 'adaptive', 'invscaling', 'adaptive',
                   'invscaling', 'invscaling', 'invscaling', 'constant'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_hidden_layer_sizes': masked_array(data=[(100,), (50,), (100,), (50,), (100,), (100,), (50,),
                   (100,), (150,), (150,), (50,), (50,), (50,), (50,),
                   (100,), (100,), (100,), (50,), (100,), (50,)],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.01, 0.01, 0.0001, 0.0001, 0.01, 0.001, 0.0001,
                   0.001, 0.01, 0.0001, 0.0001, 0.001, 0.01, 0.0001, 0.01,
                   0.01, 0.01, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_activation': masked_array(data=['relu', 'relu', 'relu', 'relu', 'tanh', 'relu', 'tanh',
                   'tanh', 'tanh', 'relu', 'tanh', 'tanh', 'tanh', 'relu',
                   'tanh', 'tanh', 'tanh', 'relu', 'relu', 'relu'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (150,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}], 'split0_test_score': array([0.44827586, 0.86206897, 0.31034483, 0.62068966, 1.        ,
       0.31034483, 0.4137931 , 0.89655172, 0.96551724, 0.5862069 ,
       0.68965517, 0.96551724, 1.        , 0.17241379, 0.5862069 ,
       0.96551724, 0.96551724, 0.27586207, 0.5862069 , 0.31034483]), 'split1_test_score': array([0.27586207, 0.27586207, 0.31034483, 0.31034483, 0.86206897,
       0.93103448, 0.62068966, 0.93103448, 0.93103448, 0.89655172,
       0.4137931 , 0.93103448, 0.93103448, 0.31034483, 0.89655172,
       0.93103448, 0.93103448, 0.93103448, 0.31034483, 0.4137931 ]), 'split2_test_score': array([0.92857143, 0.28571429, 0.42857143, 0.39285714, 0.96428571,
       0.89285714, 0.67857143, 0.96428571, 0.96428571, 0.89285714,
       0.39285714, 0.96428571, 0.96428571, 0.46428571, 0.96428571,
       0.96428571, 0.96428571, 0.85714286, 0.32142857, 0.32142857]), 'split3_test_score': array([0.85714286, 0.32142857, 0.32142857, 0.32142857, 0.82142857,
       0.89285714, 0.32142857, 0.92857143, 0.92857143, 0.85714286,
       0.57142857, 0.78571429, 0.92857143, 0.39285714, 0.85714286,
       0.92857143, 0.92857143, 0.57142857, 0.5       , 0.32142857]), 'split4_test_score': array([0.5       , 0.39285714, 0.32142857, 0.25      , 0.82142857,
       0.42857143, 0.60714286, 0.92857143, 0.92857143, 0.64285714,
       0.39285714, 0.92857143, 0.92857143, 0.85714286, 0.92857143,
       0.92857143, 0.92857143, 0.39285714, 0.42857143, 0.39285714]), 'mean_test_score': array([0.60197044, 0.42758621, 0.33842365, 0.37906404, 0.89384236,
       0.691133  , 0.52832512, 0.92980296, 0.94359606, 0.77512315,
       0.49211823, 0.91502463, 0.95049261, 0.43940887, 0.84655172,
       0.94359606, 0.94359606, 0.60566502, 0.42931034, 0.35197044]), 'std_test_score': array([0.24985909, 0.22108762, 0.04534562, 0.12905417, 0.07446982,
       0.26566001, 0.13655853, 0.02144414, 0.01742339, 0.13305418,
       0.11929068, 0.06653894, 0.02821676, 0.23031783, 0.13489264,
       0.01742339, 0.01742339, 0.25469028, 0.10526668, 0.04264286]), 'rank_test_score': array([12, 17, 20, 18,  7, 10, 13,  5,  2,  9, 14,  6,  1, 15,  8,  2,  2,
       11, 16, 19], dtype=int32)}