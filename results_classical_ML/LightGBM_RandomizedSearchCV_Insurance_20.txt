LightGBM_RandomizedSearchCV for the Insurance dataset with n_iter=20
CV-score:
0.7580422678338031
test-score:
0.7575371549893843
runtime:
0:01:08.891023
best parameters:
{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.76245136, 0.823878  , 1.0395936 , 0.50682464, 0.74904108,
       0.47366433, 0.57208767, 0.4657269 , 2.02879968, 0.87362032,
       0.19369254, 0.30334039, 0.35533562, 0.60276971, 0.91300654,
       0.54692822, 0.34711256, 0.40367951, 0.89949102, 0.35342355]), 'std_fit_time': array([0.22239127, 0.14617904, 0.36017634, 0.13166975, 0.25425472,
       0.16789305, 0.11449067, 0.0792584 , 0.67319427, 0.16226116,
       0.05746647, 0.05473381, 0.02428079, 0.48658279, 0.33426101,
       0.08254123, 0.23565316, 0.14895376, 0.18325704, 0.11846349]), 'mean_score_time': array([0.01106157, 0.01750689, 0.01584277, 0.01185303, 0.0116271 ,
       0.00842795, 0.01655083, 0.01018405, 0.02336869, 0.01048775,
       0.00412245, 0.00696502, 0.00887475, 0.01316328, 0.0136549 ,
       0.01410131, 0.00599656, 0.01031651, 0.01478901, 0.01099882]), 'std_score_time': array([0.00026947, 0.00492097, 0.00514218, 0.00254146, 0.00198631,
       0.00324231, 0.01204345, 0.00689875, 0.00646287, 0.00057472,
       0.00044314, 0.00132136, 0.00354006, 0.00553394, 0.00569421,
       0.00152499, 0.00143491, 0.00478071, 0.00461735, 0.00176448]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([0.75796178, 0.75822718, 0.757431  , 0.75902335, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75796178, 0.75185775,
       0.75796178, 0.75796178, 0.75796178, 0.75690021, 0.75822718,
       0.75504246, 0.75796178, 0.75796178, 0.75822718, 0.757431  ]), 'split1_test_score': array([0.75796178, 0.75769639, 0.75796178, 0.75398089, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75796178, 0.75132696,
       0.75796178, 0.75796178, 0.75796178, 0.75716561, 0.75716561,
       0.75583864, 0.75796178, 0.75796178, 0.75345011, 0.75796178]), 'split2_test_score': array([0.75796178, 0.75690021, 0.75663482, 0.75636943, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75822718, 0.75      ,
       0.75796178, 0.75796178, 0.75796178, 0.75318471, 0.75769639,
       0.75185775, 0.75796178, 0.75796178, 0.75265393, 0.75663482]), 'split3_test_score': array([0.75816299, 0.75763207, 0.75763207, 0.75630475, 0.75816299,
       0.75816299, 0.75816299, 0.75816299, 0.75816299, 0.74780993,
       0.75816299, 0.75789753, 0.75816299, 0.75550836, 0.75710114,
       0.75391558, 0.75816299, 0.75816299, 0.75497744, 0.75763207]), 'split4_test_score': array([0.75816299, 0.75683568, 0.75789753, 0.75763207, 0.75816299,
       0.75816299, 0.75816299, 0.75816299, 0.7573666 , 0.75338466,
       0.75816299, 0.75816299, 0.75816299, 0.75418105, 0.7573666 ,
       0.75391558, 0.75816299, 0.75816299, 0.7552429 , 0.75789753]), 'mean_test_score': array([0.75804227, 0.75745831, 0.75751144, 0.7566621 , 0.75804227,
       0.75804227, 0.75804227, 0.75804227, 0.75793607, 0.75087586,
       0.75804227, 0.75798918, 0.75804227, 0.75538799, 0.75751138,
       0.754114  , 0.75804227, 0.75804227, 0.75491031, 0.75751144]), 'std_test_score': array([9.85728492e-05, 5.24818598e-04, 4.77778422e-04, 1.66844803e-03,
       9.85728492e-05, 9.85728492e-05, 9.85728492e-05, 9.85728492e-05,
       3.03924526e-04, 1.87769688e-03, 9.85728492e-05, 9.04020718e-05,
       9.85728492e-05, 1.53442908e-03, 4.13620350e-04, 1.34207569e-03,
       9.85728492e-05, 9.85728492e-05, 1.91521166e-03, 4.77778422e-04]), 'rank_test_score': array([ 1, 15, 12, 16,  1,  1,  1,  1, 11, 20,  1, 10,  1, 17, 14, 19,  1,
        1, 18, 12], dtype=int32)}