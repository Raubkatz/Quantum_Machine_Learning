XGBoost_RandomizedSearchCV for the Insurance dataset with n_iter=20
CV-score:
0.7580422678338031
test-score:
0.7575371549893843
runtime:
0:01:39.028953
best parameters:
{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([1.33639655, 1.60113649, 0.93256731, 0.75939164, 0.77907586,
       0.9663785 , 0.93596129, 0.56608624, 1.15203977, 1.59997683,
       0.39782567, 0.51444855, 0.74214282, 0.8597878 , 1.46354132,
       0.95998363, 0.32996979, 0.66881418, 2.05401602, 0.60357814]), 'std_fit_time': array([0.12631863, 0.94017159, 0.0923025 , 0.07196482, 0.11046175,
       0.44868694, 0.43731673, 0.14214732, 0.15507509, 0.26869141,
       0.10522337, 0.06361997, 0.1490757 , 0.14671307, 0.69784665,
       0.35390575, 0.04235803, 0.14598154, 0.80743607, 0.04776573]), 'mean_score_time': array([0.02035956, 0.01457953, 0.01303654, 0.01026988, 0.01093707,
       0.00921583, 0.0131072 , 0.00925179, 0.01941061, 0.02123642,
       0.00886865, 0.00860128, 0.01194544, 0.01271605, 0.01331882,
       0.01275921, 0.00624847, 0.00715756, 0.02140646, 0.00942907]), 'std_score_time': array([0.00273663, 0.00087334, 0.00338412, 0.00132618, 0.00231844,
       0.00197135, 0.00459751, 0.00359853, 0.0038003 , 0.00208562,
       0.00285244, 0.00149304, 0.00070076, 0.00268492, 0.0095525 ,
       0.00179114, 0.00121728, 0.00141171, 0.0007649 , 0.00223031]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([0.75796178, 0.75822718, 0.75716561, 0.75610403, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75796178, 0.73752654,
       0.75398089, 0.75796178, 0.75398089, 0.75345011, 0.75636943,
       0.75610403, 0.75796178, 0.75796178, 0.74575372, 0.75769639]), 'split1_test_score': array([0.75796178, 0.757431  , 0.75690021, 0.75690021, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75796178, 0.74203822,
       0.75636943, 0.75796178, 0.75636943, 0.75583864, 0.75583864,
       0.75690021, 0.75796178, 0.75796178, 0.75159236, 0.75769639]), 'split2_test_score': array([0.75796178, 0.757431  , 0.75663482, 0.75583864, 0.75796178,
       0.75796178, 0.75796178, 0.75796178, 0.75769639, 0.74124204,
       0.757431  , 0.75796178, 0.75610403, 0.75212314, 0.75636943,
       0.75636943, 0.75796178, 0.75796178, 0.75      , 0.75769639]), 'split3_test_score': array([0.75816299, 0.75842846, 0.75763207, 0.75710114, 0.75816299,
       0.75816299, 0.75816299, 0.75816299, 0.75816299, 0.74780993,
       0.75657022, 0.75789753, 0.75683568, 0.75630475, 0.75763207,
       0.75789753, 0.75816299, 0.75816299, 0.7552429 , 0.75816299]), 'split4_test_score': array([0.75816299, 0.75816299, 0.75710114, 0.75550836, 0.75816299,
       0.75816299, 0.75816299, 0.75816299, 0.75816299, 0.74542076,
       0.75789753, 0.75816299, 0.75444651, 0.75365012, 0.75630475,
       0.75816299, 0.75816299, 0.75816299, 0.75126095, 0.75816299]), 'mean_test_score': array([0.75804227, 0.75793612, 0.75708677, 0.75629048, 0.75804227,
       0.75804227, 0.75804227, 0.75804227, 0.75798919, 0.7428075 ,
       0.75644981, 0.75798918, 0.75554731, 0.75427335, 0.75650286,
       0.75708684, 0.75804227, 0.75804227, 0.75076998, 0.75788303]), 'std_test_score': array([9.85728492e-05, 4.21634633e-04, 3.29494877e-04, 6.13118978e-04,
       9.85728492e-05, 9.85728492e-05, 9.85728492e-05, 9.85728492e-05,
       1.71842748e-04, 3.54356958e-03, 1.35463225e-03, 9.04020718e-05,
       1.12348912e-03, 1.56628668e-03, 5.98523678e-04, 8.16179871e-04,
       9.85728492e-05, 9.85728492e-05, 3.05549136e-03, 2.28588228e-04]), 'rank_test_score': array([ 1, 10, 13, 16,  1,  1,  1,  1,  8, 20, 15,  9, 17, 18, 14, 12,  1,
        1, 19, 11], dtype=int32)}