XGBoost_RandomizedSearchCV for the wine dataset with n_iter=20
CV-score:
0.9857142857142858
test-score:
1.0
runtime:
0:00:22.770385
best parameters:
{'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.29303198, 0.23521824, 0.13583274, 0.18099113, 0.24893332,
       0.20836172, 0.20468278, 0.2440063 , 0.27216187, 0.16152864,
       0.25517883, 0.16015592, 0.47012429, 0.3683064 , 0.11970744,
       0.15780807, 0.07301064, 0.24390445, 0.18467336, 0.18934574]), 'std_fit_time': array([0.08223429, 0.04648583, 0.02992891, 0.03130631, 0.00703919,
       0.02387282, 0.01225354, 0.05506337, 0.0544982 , 0.10324011,
       0.11314073, 0.06101586, 0.19615073, 0.19081441, 0.03991847,
       0.02798861, 0.01645004, 0.07498765, 0.04397718, 0.04868144]), 'mean_score_time': array([0.0044342 , 0.00394726, 0.0020596 , 0.00225382, 0.00392694,
       0.00272789, 0.00307813, 0.00433817, 0.00337768, 0.00411091,
       0.00738454, 0.00677533, 0.00470061, 0.00286813, 0.00613618,
       0.00449581, 0.00268602, 0.00520306, 0.00326595, 0.00168839]), 'std_score_time': array([0.00174781, 0.00144373, 0.00117021, 0.00085775, 0.00241397,
       0.0010911 , 0.0012361 , 0.0015203 , 0.0016478 , 0.00418505,
       0.00593461, 0.00690441, 0.00200246, 0.00163189, 0.00485415,
       0.00090185, 0.0010653 , 0.00185489, 0.00135081, 0.00012748]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
       0.96551724, 1.        , 1.        , 1.        , 1.        ,
       0.96551724, 1.        , 1.        , 1.        , 1.        ,
       1.        , 1.        , 1.        , 1.        , 1.        ]), 'split1_test_score': array([0.96551724, 0.96551724, 0.96551724, 0.96551724, 0.96551724,
       0.93103448, 0.96551724, 1.        , 0.96551724, 0.96551724,
       0.93103448, 0.96551724, 0.96551724, 0.96551724, 0.96551724,
       1.        , 0.96551724, 0.96551724, 0.93103448, 0.96551724]), 'split2_test_score': array([0.92857143, 0.96428571, 0.92857143, 0.92857143, 0.92857143,
       0.92857143, 0.92857143, 0.92857143, 0.92857143, 0.92857143,
       0.89285714, 0.92857143, 0.92857143, 0.92857143, 0.92857143,
       0.96428571, 0.92857143, 0.92857143, 0.92857143, 0.96428571]), 'split3_test_score': array([0.96428571, 0.96428571, 0.96428571, 0.96428571, 0.96428571,
       0.96428571, 0.96428571, 0.92857143, 0.96428571, 0.96428571,
       0.92857143, 0.96428571, 0.96428571, 0.96428571, 0.96428571,
       0.96428571, 0.96428571, 0.96428571, 0.96428571, 0.96428571]), 'split4_test_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,
       0.96428571, 1.        , 1.        , 1.        , 1.        ,
       0.92857143, 1.        , 1.        , 1.        , 1.        ,
       1.        , 1.        , 1.        , 0.92857143, 1.        ]), 'mean_test_score': array([0.97167488, 0.97881773, 0.97167488, 0.97167488, 0.97167488,
       0.95073892, 0.97167488, 0.97142857, 0.97167488, 0.97167488,
       0.92931034, 0.97167488, 0.97167488, 0.97167488, 0.97167488,
       0.98571429, 0.97167488, 0.97167488, 0.95049261, 0.97881773]), 'std_test_score': array([0.02666477, 0.01730109, 0.02666477, 0.02666477, 0.02666477,
       0.01711778, 0.02666477, 0.03499271, 0.02666477, 0.02666477,
       0.02299496, 0.02666477, 0.02666477, 0.02666477, 0.02666477,
       0.01749636, 0.02666477, 0.02666477, 0.02821676, 0.01730109]), 'rank_test_score': array([ 4,  2,  4,  4,  4, 18,  4, 17,  4,  4, 20,  4,  4,  4,  4,  1,  4,
        4, 19,  2], dtype=int32)}