Ridge_RandomizedSearchCV for the phoneme dataset with n_iter=20
CV-score:
0.2380738329450458
test-score:
0.25615840105085974
runtime:
0:00:00.799786
best parameters:
{'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.0056941 , 0.00281982, 0.0083468 , 0.00196109, 0.00191855,
       0.00194607, 0.00238776, 0.00805836, 0.01672664, 0.00293999,
       0.00519156, 0.00401745, 0.0027916 , 0.0023716 , 0.00337367,
       0.01154408, 0.00205927, 0.01006498, 0.01215158, 0.01066227]), 'std_fit_time': array([6.81056406e-04, 6.79531822e-04, 1.16111080e-03, 3.90396998e-04,
       3.02708532e-04, 3.35243063e-04, 8.86034783e-05, 8.38148548e-04,
       3.66393625e-03, 1.10648252e-04, 3.21165520e-03, 1.55647767e-03,
       7.50573577e-04, 7.72085209e-05, 7.66595485e-05, 6.23457675e-04,
       6.93611212e-04, 1.47002656e-03, 5.93786276e-04, 2.10675873e-03]), 'mean_score_time': array([0.01202612, 0.00072107, 0.00072417, 0.0006125 , 0.00069995,
       0.00084867, 0.00096545, 0.00129042, 0.00112853, 0.00088515,
       0.00084291, 0.00096936, 0.00088797, 0.00087991, 0.00086894,
       0.00091538, 0.00060258, 0.0010622 , 0.00124831, 0.00083971]), 'std_score_time': array([2.27918427e-02, 1.90429121e-04, 1.84042626e-04, 1.26929448e-04,
       1.59885455e-04, 6.69866434e-05, 1.54796648e-05, 7.00409674e-05,
       1.50452106e-04, 1.63976527e-05, 2.05778279e-04, 8.41135070e-05,
       2.51974038e-05, 1.53224333e-05, 3.46534987e-05, 4.38831659e-05,
       1.33948353e-04, 2.55567520e-04, 1.35962187e-04, 2.25917676e-04]), 'param_tol': masked_array(data=[0.01, 0.001, 0.01, 0.0001, 0.0001, 0.0001, 0.001, 0.01,
                   0.0001, 0.0001, 0.01, 0.0001, 0.001, 0.01, 0.001,
                   0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['saga', 'sparse_cg', 'sag', 'svd', 'auto', 'cholesky',
                   'svd', 'saga', 'sag', 'sparse_cg', 'sparse_cg', 'auto',
                   'svd', 'svd', 'sparse_cg', 'saga', 'svd', 'saga',
                   'saga', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_random_state': masked_array(data=[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
                   42, 42, 42, 42, 42, 42],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_normalize': masked_array(data=[True, False, False, True, True, False, True, True,
                   False, True, False, False, True, True, True, False,
                   True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[1000, 100, 1000, 1000, 100, 100, 1000, 1000, 500, 1000,
                   1000, 100, 100, 500, 100, 1000, 100, 500, 100, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, False, False, False, False,
                   True, False, True, False, False, False, True, True,
                   True, True, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_copy_X': masked_array(data=[False, False, True, True, True, True, False, True,
                   False, False, True, False, True, True, False, False,
                   True, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.1, 0.1, 0.1, 1, 10, 0.001, 0.1, 0.001, 0.1, 10,
                   100, 0.001, 1, 0.01, 10, 1, 100, 10, 0.1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'cholesky', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 10}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.0001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 10}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 100}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 100}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}], 'split0_test_score': array([0.24274626, 0.24297738, 0.24295692, 0.24045306, 0.19875174,
       0.19744092, 0.19883896, 0.1990223 , 0.24298811, 0.1988272 ,
       0.24033855, 0.16791338, 0.19883896, 0.19875174, 0.24281387,
       0.24030646, 0.19621359, 0.19498329, 0.19744122, 0.19883021]), 'split1_test_score': array([0.204063  , 0.20374554, 0.20381945, 0.20650147, 0.17609221,
       0.1802091 , 0.17548286, 0.17541228, 0.20366678, 0.17553601,
       0.20871232, 0.1731681 , 0.17548286, 0.17609221, 0.20408037,
       0.20841063, 0.18348622, 0.185494  , 0.18020561, 0.17555693]), 'split2_test_score': array([0.22019221, 0.21996523, 0.22016493, 0.2200253 , 0.17625904,
       0.17505396, 0.17631299, 0.17632504, 0.21995793, 0.17630774,
       0.21945114, 0.13811313, 0.17631299, 0.17625904, 0.2200754 ,
       0.21929725, 0.18490795, 0.18175242, 0.17504786, 0.17630934]), 'split3_test_score': array([0.24199662, 0.24169471, 0.24160452, 0.24330284, 0.16222521,
       0.16246129, 0.16209002, 0.1620567 , 0.24166217, 0.1621035 ,
       0.24316642, 0.13368047, 0.16209002, 0.16222521, 0.24199156,
       0.24306797, 0.20763582, 0.2062758 , 0.16246115, 0.16210388]), 'split4_test_score': array([0.28125422, 0.28172584, 0.28118954, 0.27726613, 0.21153878,
       0.20768438, 0.2119188 , 0.21205345, 0.28175911, 0.21188413,
       0.27672716, 0.16051559, 0.2119188 , 0.21153878, 0.28140796,
       0.2766188 , 0.21882928, 0.21635438, 0.20768689, 0.2118838 ]), 'mean_test_score': array([0.23805046, 0.23802174, 0.23794707, 0.23750976, 0.1849734 ,
       0.18456993, 0.18492873, 0.18497395, 0.23800682, 0.18493171,
       0.23767912, 0.15467813, 0.18492873, 0.1849734 , 0.23807383,
       0.23754022, 0.19821457, 0.19697198, 0.18456855, 0.18493683]), 'std_test_score': array([0.02599328, 0.02626402, 0.02603569, 0.02404168, 0.01770795,
       0.01611399, 0.01792775, 0.01801158, 0.02629615, 0.01790696,
       0.02338062, 0.01591495, 0.01792775, 0.01770795, 0.02605825,
       0.02343793, 0.01350348, 0.01288078, 0.0161157 , 0.01790489]), 'rank_test_score': array([ 2,  3,  5,  8, 13, 18, 16, 11,  4, 15,  6, 20, 16, 12,  1,  7,  9,
       10, 19, 14], dtype=int32)}