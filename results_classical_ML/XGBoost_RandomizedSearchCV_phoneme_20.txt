XGBoost_RandomizedSearchCV for the phoneme dataset with n_iter=20
CV-score:
0.8952154249625348
test-score:
0.902867715078631
runtime:
0:01:11.853314
best parameters:
{'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.73232183, 0.53758698, 0.40591526, 1.33280129, 0.77829394,
       0.48785954, 0.43646722, 0.52881575, 1.23322482, 1.99837589,
       0.46306176, 0.32841916, 0.56942067, 0.42770343, 0.19858041,
       1.25841432, 0.27880111, 0.33197269, 1.12057676, 0.49292302]), 'std_fit_time': array([0.12695223, 0.1591368 , 0.08909943, 0.77399901, 0.17818211,
       0.14332184, 0.07777314, 0.19271196, 0.42512697, 2.02465398,
       0.08671803, 0.0703052 , 0.07949879, 0.02718969, 0.02747167,
       0.77255291, 0.04706396, 0.04394213, 0.27050475, 0.10880352]), 'mean_score_time': array([0.00634227, 0.00672245, 0.0093842 , 0.01388569, 0.00852165,
       0.00630312, 0.00620766, 0.00768051, 0.0192358 , 0.01478639,
       0.00524569, 0.00806718, 0.00648718, 0.01075912, 0.00776081,
       0.01190615, 0.00777464, 0.00898838, 0.01061831, 0.0067399 ]), 'std_score_time': array([0.0001054 , 0.00146625, 0.00439609, 0.00671946, 0.00189429,
       0.0013652 , 0.00120491, 0.00385776, 0.01465065, 0.00545625,
       0.00154278, 0.00388306, 0.00182151, 0.005562  , 0.00375561,
       0.00695562, 0.00228718, 0.00454178, 0.00191039, 0.00187823]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([0.88092486, 0.86820809, 0.87283237, 0.87976879, 0.8566474 ,
       0.84508671, 0.87283237, 0.8416185 , 0.87514451, 0.89364162,
       0.87861272, 0.86589595, 0.88554913, 0.87745665, 0.87745665,
       0.8716763 , 0.87514451, 0.83583815, 0.89595376, 0.86127168]), 'split1_test_score': array([0.86589595, 0.85895954, 0.85895954, 0.87052023, 0.85317919,
       0.84855491, 0.86473988, 0.81734104, 0.8566474 , 0.87514451,
       0.87398844, 0.86242775, 0.87514451, 0.86820809, 0.85086705,
       0.84739884, 0.86242775, 0.81734104, 0.87745665, 0.84971098]), 'split2_test_score': array([0.87976879, 0.86242775, 0.86589595, 0.87398844, 0.85895954,
       0.84855491, 0.86127168, 0.83815029, 0.84624277, 0.88901734,
       0.88554913, 0.86473988, 0.88786127, 0.86936416, 0.8716763 ,
       0.86589595, 0.87630058, 0.8265896 , 0.89595376, 0.84046243]), 'split3_test_score': array([0.88773148, 0.87962963, 0.86921296, 0.87847222, 0.85648148,
       0.84143519, 0.87384259, 0.84837963, 0.87384259, 0.89351852,
       0.88078704, 0.87268519, 0.8900463 , 0.88425926, 0.86111111,
       0.88425926, 0.87268519, 0.84259259, 0.8912037 , 0.87037037]), 'split4_test_score': array([0.91203704, 0.8912037 , 0.88888889, 0.90277778, 0.89236111,
       0.88194444, 0.90162037, 0.85300926, 0.8900463 , 0.91550926,
       0.91898148, 0.8912037 , 0.91898148, 0.90740741, 0.88888889,
       0.90046296, 0.90509259, 0.85648148, 0.91550926, 0.86921296]), 'mean_test_score': array([0.88527162, 0.87208574, 0.87115794, 0.88110549, 0.86352574,
       0.85311523, 0.87486138, 0.83969974, 0.86838471, 0.89336625,
       0.88758376, 0.87139049, 0.89151654, 0.88133911, 0.87      ,
       0.87393866, 0.87833012, 0.83576857, 0.89521542, 0.85820568]), 'std_test_score': array([0.01514616, 0.01185763, 0.00997459, 0.01132351, 0.01453488,
       0.01465331, 0.01420087, 0.01231647, 0.01531494, 0.01297194,
       0.01613359, 0.01047846, 0.01465264, 0.01427571, 0.01311704,
       0.0178001 , 0.01424955, 0.01341212, 0.01220162, 0.0115371 ]), 'rank_test_score': array([ 5, 11, 13,  7, 16, 18,  9, 19, 15,  2,  4, 12,  3,  6, 14, 10,  8,
       20,  1, 17], dtype=int32)}