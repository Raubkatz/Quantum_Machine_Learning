MLP_RandomizedSearchCV for the phoneme dataset with n_iter=20
CV-score:
0.8137896060800685
test-score:
0.8316373728029602
runtime:
0:03:40.073219
best parameters:
{'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([2.93512864, 2.37322655, 0.34556046, 0.33505688, 1.23652363,
       2.93500295, 3.35160451, 0.72058086, 1.23035398, 3.29217658,
       4.65565186, 1.10771999, 1.60419769, 4.81918912, 1.03840208,
       0.95862699, 1.15237961, 4.18831859, 0.45222082, 3.90623121]), 'std_fit_time': array([0.14116913, 0.20640787, 0.14594308, 0.15881462, 0.24103398,
       0.16851282, 0.57138488, 0.10574535, 0.42584114, 0.37114529,
       0.5324368 , 0.24750515, 0.30893511, 0.30126057, 0.10291839,
       0.1435286 , 0.18102259, 1.50284619, 0.26923741, 0.522619  ]), 'mean_score_time': array([0.00283675, 0.0024344 , 0.00275235, 0.00253816, 0.00424485,
       0.00295238, 0.00278831, 0.00382547, 0.00749254, 0.00260954,
       0.00358953, 0.00373187, 0.00568891, 0.00391035, 0.00447578,
       0.00447454, 0.00427918, 0.00219736, 0.00281539, 0.00250325]), 'std_score_time': array([3.55063252e-04, 3.98214491e-04, 3.05277837e-05, 3.95882259e-05,
       1.03877484e-03, 3.24544401e-04, 6.84167659e-04, 8.20858131e-04,
       5.60806541e-03, 4.83289701e-04, 1.06069594e-04, 2.46267747e-04,
       3.13772933e-03, 2.59249099e-03, 7.56038425e-04, 7.77206399e-04,
       7.83021460e-04, 7.35608396e-04, 3.94836140e-05, 4.24682122e-04]), 'param_solver': masked_array(data=['adam', 'adam', 'sgd', 'sgd', 'adam', 'adam', 'sgd',
                   'adam', 'adam', 'adam', 'sgd', 'adam', 'adam', 'adam',
                   'adam', 'adam', 'adam', 'adam', 'sgd', 'sgd'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[200, 200, 400, 300, 200, 200, 300, 400, 300, 200, 400,
                   300, 400, 400, 200, 300, 300, 300, 200, 400],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=['invscaling', 'constant', 'invscaling', 'invscaling',
                   'constant', 'constant', 'constant', 'adaptive',
                   'adaptive', 'constant', 'adaptive', 'constant',
                   'invscaling', 'adaptive', 'invscaling', 'adaptive',
                   'invscaling', 'invscaling', 'invscaling', 'constant'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_hidden_layer_sizes': masked_array(data=[(100,), (50,), (100,), (50,), (100,), (100,), (50,),
                   (100,), (150,), (150,), (50,), (50,), (50,), (50,),
                   (100,), (100,), (100,), (50,), (100,), (50,)],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.01, 0.01, 0.0001, 0.0001, 0.01, 0.001, 0.0001,
                   0.001, 0.01, 0.0001, 0.0001, 0.001, 0.01, 0.0001, 0.01,
                   0.01, 0.01, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_activation': masked_array(data=['relu', 'relu', 'relu', 'relu', 'tanh', 'relu', 'tanh',
                   'tanh', 'tanh', 'relu', 'tanh', 'tanh', 'tanh', 'relu',
                   'tanh', 'tanh', 'tanh', 'relu', 'relu', 'relu'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (150,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}], 'split0_test_score': array([0.81040462, 0.77109827, 0.70520231, 0.70520231, 0.73988439,
       0.80115607, 0.73294798, 0.74104046, 0.74913295, 0.81156069,
       0.73641618, 0.7433526 , 0.74104046, 0.81618497, 0.73988439,
       0.73988439, 0.73757225, 0.79306358, 0.2982659 , 0.75375723]), 'split1_test_score': array([0.79421965, 0.77456647, 0.58612717, 0.69595376, 0.73526012,
       0.79421965, 0.72716763, 0.73757225, 0.73526012, 0.81271676,
       0.73526012, 0.73294798, 0.73410405, 0.81156069, 0.73641618,
       0.72601156, 0.73179191, 0.79537572, 0.70520231, 0.73526012]), 'split2_test_score': array([0.78265896, 0.77456647, 0.70635838, 0.41734104, 0.73988439,
       0.7734104 , 0.73757225, 0.75144509, 0.74566474, 0.77572254,
       0.74450867, 0.7433526 , 0.74219653, 0.80115607, 0.73988439,
       0.75144509, 0.73872832, 0.77225434, 0.70635838, 0.73988439]), 'split3_test_score': array([0.78587963, 0.78009259, 0.70601852, 0.70601852, 0.74305556,
       0.78356481, 0.74421296, 0.74305556, 0.73958333, 0.79166667,
       0.74074074, 0.75115741, 0.74421296, 0.80787037, 0.74768519,
       0.74884259, 0.75810185, 0.79282407, 0.69212963, 0.74884259]), 'split4_test_score': array([0.8287037 , 0.82523148, 0.70601852, 0.70601852, 0.75462963,
       0.82407407, 0.75810185, 0.77314815, 0.77199074, 0.8275463 ,
       0.75578704, 0.77546296, 0.77199074, 0.83217593, 0.77777778,
       0.76851852, 0.75462963, 0.82407407, 0.70601852, 0.75694444]), 'mean_test_score': array([0.80037331, 0.78511106, 0.68194498, 0.64610683, 0.74254282,
       0.795285  , 0.74000054, 0.7492523 , 0.74832638, 0.80384259,
       0.74254255, 0.74925471, 0.74670895, 0.81378961, 0.74832959,
       0.74694043, 0.74416479, 0.79551836, 0.62159495, 0.74693775]), 'std_test_score': array([0.01711707, 0.02026607, 0.04791042, 0.11444614, 0.00653492,
       0.01720625, 0.01063692, 0.01279123, 0.0127664 , 0.01810622,
       0.00739046, 0.01432531, 0.01309027, 0.01042503, 0.01518014,
       0.01398091, 0.01029427, 0.01655264, 0.1617524 , 0.00820225]), 'rank_test_score': array([ 3,  6, 18, 19, 15,  5, 17,  8, 10,  2, 16,  7, 13,  1,  9, 11, 14,
        4, 20, 12], dtype=int32)}