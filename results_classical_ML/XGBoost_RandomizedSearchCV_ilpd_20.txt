XGBoost_RandomizedSearchCV for the ilpd dataset with n_iter=20
CV-score:
0.6952642415923129
test-score:
0.7350427350427351
runtime:
0:00:30.634692
best parameters:
{'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.63166108, 0.33209567, 0.23934822, 0.26466465, 0.35023413,
       0.12739382, 0.39535832, 0.5489532 , 0.34457202, 0.27740736,
       0.1577528 , 0.23890347, 0.32894216, 0.28233538, 0.23128524,
       0.35538492, 0.15840359, 0.14160061, 0.27835202, 0.17576098]), 'std_fit_time': array([0.26502561, 0.04568583, 0.05837448, 0.08106905, 0.15285128,
       0.00888007, 0.23998795, 0.39146295, 0.08708427, 0.10206351,
       0.04853062, 0.10356221, 0.06932653, 0.05634704, 0.07716064,
       0.07183705, 0.09647422, 0.04131735, 0.09835772, 0.05440338]), 'mean_score_time': array([0.00585122, 0.00461564, 0.00474515, 0.00598989, 0.00514216,
       0.00378122, 0.0066462 , 0.00263634, 0.00403104, 0.00383081,
       0.00376673, 0.00757861, 0.0062695 , 0.00608158, 0.00801744,
       0.00474229, 0.00826526, 0.00321126, 0.01552291, 0.00720344]), 'std_score_time': array([0.00218326, 0.00199465, 0.00162675, 0.00503514, 0.00124643,
       0.00305702, 0.00368521, 0.00099919, 0.0015863 , 0.00139932,
       0.00214489, 0.00693105, 0.00331145, 0.00205511, 0.00432226,
       0.00122651, 0.0080677 , 0.00128379, 0.0154228 , 0.00653996]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([0.65957447, 0.72340426, 0.63829787, 0.65957447, 0.65957447,
       0.64893617, 0.64893617, 0.63829787, 0.70212766, 0.65957447,
       0.61702128, 0.67021277, 0.62765957, 0.64893617, 0.69148936,
       0.67021277, 0.65957447, 0.70212766, 0.64893617, 0.67021277]), 'split1_test_score': array([0.64516129, 0.6344086 , 0.6344086 , 0.62365591, 0.61290323,
       0.61290323, 0.6344086 , 0.67741935, 0.65591398, 0.64516129,
       0.62365591, 0.61290323, 0.65591398, 0.64516129, 0.67741935,
       0.65591398, 0.6344086 , 0.61290323, 0.6344086 , 0.6344086 ]), 'split2_test_score': array([0.72043011, 0.67741935, 0.74193548, 0.70967742, 0.69892473,
       0.68817204, 0.70967742, 0.70967742, 0.7311828 , 0.69892473,
       0.66666667, 0.66666667, 0.66666667, 0.68817204, 0.65591398,
       0.67741935, 0.67741935, 0.69892473, 0.72043011, 0.75268817]), 'split3_test_score': array([0.61290323, 0.66666667, 0.65591398, 0.64516129, 0.6344086 ,
       0.6344086 , 0.65591398, 0.64516129, 0.66666667, 0.66666667,
       0.56989247, 0.64516129, 0.62365591, 0.62365591, 0.65591398,
       0.64516129, 0.65591398, 0.67741935, 0.61290323, 0.66666667]), 'split4_test_score': array([0.75268817, 0.75268817, 0.74193548, 0.76344086, 0.75268817,
       0.76344086, 0.7311828 , 0.72043011, 0.72043011, 0.7311828 ,
       0.70967742, 0.7311828 , 0.78494624, 0.75268817, 0.76344086,
       0.74193548, 0.76344086, 0.7311828 , 0.77419355, 0.74193548]), 'mean_test_score': array([0.67815145, 0.69091741, 0.68249828, 0.68030199, 0.67169984,
       0.66957218, 0.67602379, 0.67819721, 0.69526424, 0.68030199,
       0.63738275, 0.66522535, 0.67176847, 0.67172272, 0.68883551,
       0.67812857, 0.67815145, 0.68451155, 0.67817433, 0.69318234]), 'std_test_score': array([0.05105682, 0.04203466, 0.04906848, 0.05029565, 0.04958832,
       0.05297353, 0.03753678, 0.03304105, 0.02945109, 0.03093892,
       0.04741734, 0.03877501, 0.05890163, 0.04552173, 0.03967615,
       0.03380774, 0.04478363, 0.03968457, 0.06005975, 0.04604964]), 'rank_test_score': array([11,  3,  6,  7, 17, 18, 14,  9,  1,  7, 20, 19, 15, 16,  4, 13, 11,
        5, 10,  2], dtype=int32)}