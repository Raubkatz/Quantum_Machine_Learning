XGBoost_RandomizedSearchCV for the tae dataset with n_iter=20
CV-score:
0.5333333333333333
test-score:
0.6451612903225806
runtime:
0:00:05.820371
best parameters:
{'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.04449286, 0.06280761, 0.11700926, 0.06696081, 0.05217924,
       0.04056506, 0.04544349, 0.03928933, 0.07617736, 0.06209722,
       0.02477674, 0.04630427, 0.06070523, 0.05328217, 0.03471208,
       0.0780448 , 0.02371655, 0.04201617, 0.05783453, 0.05040598]), 'std_fit_time': array([0.00308813, 0.02495593, 0.04781198, 0.04381029, 0.01473194,
       0.01624163, 0.00896819, 0.00627013, 0.01963213, 0.02325793,
       0.00528469, 0.02283992, 0.02020208, 0.01374416, 0.00767918,
       0.01824272, 0.00494663, 0.01118403, 0.00802957, 0.00970864]), 'mean_score_time': array([0.00176301, 0.0019485 , 0.002707  , 0.0029047 , 0.00204835,
       0.00169868, 0.0018991 , 0.00203099, 0.00251875, 0.00187955,
       0.00218658, 0.00211396, 0.00312042, 0.00207219, 0.00177794,
       0.00219631, 0.00176911, 0.00251741, 0.00212159, 0.00241046]), 'std_score_time': array([0.00013433, 0.00021229, 0.00099033, 0.00141998, 0.00053607,
       0.0001227 , 0.00022606, 0.00035133, 0.00090843, 0.00010137,
       0.00082183, 0.00027254, 0.00125452, 0.00034241, 0.00016459,
       0.00033612, 0.00023904, 0.00095039, 0.00028782, 0.00087698]), 'param_subsample': masked_array(data=[0.5, 0.8, 0.8, 0.5, 0.5, 0.8, 0.8, 1, 0.8, 1, 1, 0.5,
                   1, 1, 0.5, 1, 0.8, 0.8, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_n_estimators': masked_array(data=[150, 200, 200, 150, 150, 100, 150, 100, 200, 150, 50,
                   100, 100, 150, 150, 200, 50, 150, 150, 200],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_depth': masked_array(data=[10, 5, 3, 5, 5, 5, 5, 7, 7, 10, 10, 5, 10, 5, 3, 5, 7,
                   3, 10, 3],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=[0.01, 0.1, 0.2, 0.1, 0.01, 0.01, 0.05, 0.01, 0.05, 0.2,
                   0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.1, 0.2],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_colsample_bytree': masked_array(data=[0.8, 0.5, 0.8, 1, 1, 1, 0.8, 0.5, 0.5, 0.8, 1, 1, 0.8,
                   0.8, 1, 0.5, 0.8, 0.5, 1, 0.5],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'subsample': 0.5, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.01, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.01, 'colsample_bytree': 1}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 7, 'learning_rate': 0.01, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 200, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 50, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 100, 'max_depth': 5, 'learning_rate': 0.05, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 100, 'max_depth': 10, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.8}, {'subsample': 0.5, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 1}, {'subsample': 1, 'n_estimators': 200, 'max_depth': 5, 'learning_rate': 0.2, 'colsample_bytree': 0.5}, {'subsample': 0.8, 'n_estimators': 50, 'max_depth': 7, 'learning_rate': 0.05, 'colsample_bytree': 0.8}, {'subsample': 0.8, 'n_estimators': 150, 'max_depth': 3, 'learning_rate': 0.05, 'colsample_bytree': 0.5}, {'subsample': 1, 'n_estimators': 150, 'max_depth': 10, 'learning_rate': 0.1, 'colsample_bytree': 1}, {'subsample': 0.5, 'n_estimators': 200, 'max_depth': 3, 'learning_rate': 0.2, 'colsample_bytree': 0.5}], 'split0_test_score': array([0.45833333, 0.45833333, 0.5       , 0.5       , 0.5       ,
       0.45833333, 0.5       , 0.41666667, 0.41666667, 0.5       ,
       0.41666667, 0.45833333, 0.54166667, 0.5       , 0.45833333,
       0.41666667, 0.5       , 0.45833333, 0.41666667, 0.5       ]), 'split1_test_score': array([0.66666667, 0.54166667, 0.41666667, 0.33333333, 0.45833333,
       0.41666667, 0.41666667, 0.625     , 0.5       , 0.375     ,
       0.41666667, 0.45833333, 0.41666667, 0.41666667, 0.41666667,
       0.54166667, 0.41666667, 0.5       , 0.41666667, 0.5       ]), 'split2_test_score': array([0.54166667, 0.54166667, 0.5       , 0.5       , 0.54166667,
       0.41666667, 0.45833333, 0.375     , 0.5       , 0.5       ,
       0.45833333, 0.58333333, 0.45833333, 0.45833333, 0.54166667,
       0.54166667, 0.41666667, 0.45833333, 0.54166667, 0.45833333]), 'split3_test_score': array([0.45833333, 0.5       , 0.66666667, 0.5       , 0.41666667,
       0.375     , 0.5       , 0.41666667, 0.45833333, 0.625     ,
       0.375     , 0.45833333, 0.5       , 0.66666667, 0.625     ,
       0.54166667, 0.41666667, 0.5       , 0.625     , 0.54166667]), 'split4_test_score': array([0.45833333, 0.625     , 0.54166667, 0.54166667, 0.45833333,
       0.45833333, 0.54166667, 0.45833333, 0.5       , 0.5       ,
       0.5       , 0.5       , 0.5       , 0.54166667, 0.54166667,
       0.58333333, 0.45833333, 0.54166667, 0.54166667, 0.66666667]), 'mean_test_score': array([0.51666667, 0.53333333, 0.525     , 0.475     , 0.475     ,
       0.425     , 0.48333333, 0.45833333, 0.475     , 0.5       ,
       0.43333333, 0.49166667, 0.48333333, 0.51666667, 0.51666667,
       0.525     , 0.44166667, 0.49166667, 0.50833333, 0.53333333]), 'std_test_score': array([0.08164966, 0.05527708, 0.08164966, 0.07264832, 0.04249183,
       0.03118048, 0.04249183, 0.08740074, 0.03333333, 0.07905694,
       0.04249183, 0.04859127, 0.04249183, 0.08579692, 0.07264832,
       0.05651942, 0.03333333, 0.03118048, 0.08079466, 0.07168604]), 'rank_test_score': array([ 5,  1,  3, 14, 14, 20, 12, 17, 14,  9, 19, 10, 12,  6,  6,  3, 18,
       10,  8,  1], dtype=int32)}