MLP_RandomizedSearchCV for the tae dataset with n_iter=20
CV-score:
0.425
test-score:
0.3870967741935484
runtime:
0:00:08.475263
best parameters:
{'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.10738769, 0.09266315, 0.00674119, 0.005931  , 0.07732987,
       0.10234046, 0.06093264, 0.07565384, 0.07001848, 0.15107517,
       0.0878912 , 0.08402553, 0.09503841, 0.18949571, 0.07462144,
       0.07943983, 0.07802281, 0.13492742, 0.00913815, 0.04631758]), 'std_fit_time': array([1.12628567e-02, 3.76899519e-03, 9.55413901e-05, 4.09682214e-05,
       7.58990546e-03, 1.01328122e-03, 9.42792004e-03, 1.36376720e-02,
       9.47480141e-03, 2.54290508e-02, 2.24212821e-02, 1.06943025e-02,
       3.88211656e-03, 1.54006836e-02, 5.50402040e-03, 1.13078419e-02,
       1.38515573e-02, 2.71383931e-03, 2.33844192e-03, 2.54376851e-02]), 'mean_score_time': array([0.0006742 , 0.00072551, 0.00052891, 0.0005147 , 0.00069451,
       0.00067101, 0.00065451, 0.00065699, 0.00073895, 0.00096598,
       0.00072412, 0.00064087, 0.00070095, 0.00076475, 0.00073419,
       0.00065722, 0.00061603, 0.00068378, 0.00061259, 0.00061808]), 'std_score_time': array([4.53189507e-05, 1.33829002e-04, 7.77785575e-06, 3.09907471e-06,
       2.61578975e-05, 1.77294955e-05, 1.00715232e-04, 5.01497145e-05,
       8.12785127e-05, 1.64558749e-04, 1.46116895e-04, 4.44367718e-05,
       1.59032663e-04, 1.98817343e-04, 5.85556419e-05, 5.76918970e-05,
       6.87170821e-05, 5.40345085e-05, 3.68100373e-05, 9.84872030e-05]), 'param_solver': masked_array(data=['adam', 'adam', 'sgd', 'sgd', 'adam', 'adam', 'sgd',
                   'adam', 'adam', 'adam', 'sgd', 'adam', 'adam', 'adam',
                   'adam', 'adam', 'adam', 'adam', 'sgd', 'sgd'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[200, 200, 400, 300, 200, 200, 300, 400, 300, 200, 400,
                   300, 400, 400, 200, 300, 300, 300, 200, 400],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=['invscaling', 'constant', 'invscaling', 'invscaling',
                   'constant', 'constant', 'constant', 'adaptive',
                   'adaptive', 'constant', 'adaptive', 'constant',
                   'invscaling', 'adaptive', 'invscaling', 'adaptive',
                   'invscaling', 'invscaling', 'invscaling', 'constant'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_hidden_layer_sizes': masked_array(data=[(100,), (50,), (100,), (50,), (100,), (100,), (50,),
                   (100,), (150,), (150,), (50,), (50,), (50,), (50,),
                   (100,), (100,), (100,), (50,), (100,), (50,)],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.01, 0.01, 0.0001, 0.0001, 0.01, 0.001, 0.0001,
                   0.001, 0.01, 0.0001, 0.0001, 0.001, 0.01, 0.0001, 0.01,
                   0.01, 0.01, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_activation': masked_array(data=['relu', 'relu', 'relu', 'relu', 'tanh', 'relu', 'tanh',
                   'tanh', 'tanh', 'relu', 'tanh', 'tanh', 'tanh', 'relu',
                   'tanh', 'tanh', 'tanh', 'relu', 'relu', 'relu'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (150,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}], 'split0_test_score': array([0.54166667, 0.5       , 0.29166667, 0.33333333, 0.375     ,
       0.58333333, 0.54166667, 0.375     , 0.375     , 0.375     ,
       0.33333333, 0.45833333, 0.375     , 0.41666667, 0.45833333,
       0.45833333, 0.45833333, 0.5       , 0.29166667, 0.375     ]), 'split1_test_score': array([0.33333333, 0.41666667, 0.5       , 0.33333333, 0.33333333,
       0.41666667, 0.5       , 0.29166667, 0.33333333, 0.41666667,
       0.375     , 0.45833333, 0.33333333, 0.5       , 0.33333333,
       0.33333333, 0.29166667, 0.41666667, 0.29166667, 0.41666667]), 'split2_test_score': array([0.375     , 0.25      , 0.33333333, 0.375     , 0.29166667,
       0.41666667, 0.33333333, 0.33333333, 0.375     , 0.41666667,
       0.29166667, 0.33333333, 0.33333333, 0.375     , 0.375     ,
       0.29166667, 0.375     , 0.33333333, 0.375     , 0.33333333]), 'split3_test_score': array([0.25      , 0.29166667, 0.29166667, 0.33333333, 0.25      ,
       0.29166667, 0.29166667, 0.16666667, 0.25      , 0.375     ,
       0.33333333, 0.25      , 0.20833333, 0.45833333, 0.25      ,
       0.29166667, 0.25      , 0.25      , 0.33333333, 0.16666667]), 'split4_test_score': array([0.375     , 0.33333333, 0.45833333, 0.25      , 0.29166667,
       0.33333333, 0.41666667, 0.33333333, 0.33333333, 0.375     ,
       0.29166667, 0.33333333, 0.33333333, 0.375     , 0.33333333,
       0.33333333, 0.33333333, 0.33333333, 0.29166667, 0.45833333]), 'mean_test_score': array([0.375     , 0.35833333, 0.375     , 0.325     , 0.30833333,
       0.40833333, 0.41666667, 0.3       , 0.33333333, 0.39166667,
       0.325     , 0.36666667, 0.31666667, 0.425     , 0.35      ,
       0.34166667, 0.34166667, 0.36666667, 0.31666667, 0.35      ]), 'std_test_score': array([0.09501462, 0.08975275, 0.08740074, 0.04082483, 0.04249183,
       0.1       , 0.09501462, 0.07168604, 0.04564355, 0.02041241,
       0.03118048, 0.08079466, 0.05651942, 0.04859127, 0.06770032,
       0.06123724, 0.07168604, 0.08498366, 0.03333333, 0.10069205]), 'rank_test_score': array([ 5,  9,  5, 16, 19,  3,  2, 20, 14,  4, 15,  7, 18,  1, 10, 12, 12,
        7, 17, 10], dtype=int32)}