Ridge_RandomizedSearchCV for the iris dataset with n_iter=20
CV-score:
0.9139701282072752
test-score:
0.9465972019937781
runtime:
0:00:00.175009
best parameters:
{'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.00075574, 0.00067015, 0.00068207, 0.00586514, 0.00074811,
       0.00033579, 0.00033116, 0.00077667, 0.00084085, 0.00062151,
       0.00060902, 0.00034165, 0.00046015, 0.00033646, 0.00070934,
       0.00075574, 0.00046124, 0.000701  , 0.00130854, 0.00326629]), 'std_fit_time': array([4.76745120e-05, 4.33576887e-05, 2.87143086e-05, 9.71344663e-03,
       8.14599989e-04, 2.72924195e-06, 2.58109448e-06, 4.80742200e-05,
       1.75657386e-05, 1.08289288e-05, 3.43023276e-05, 1.30752540e-05,
       9.93694773e-05, 3.08804986e-06, 3.08655481e-05, 1.87011375e-05,
       9.58857755e-06, 5.37664292e-06, 2.41584387e-04, 3.54610218e-04]), 'mean_score_time': array([0.00032206, 0.00029349, 0.00030365, 0.00063229, 0.00031638,
       0.00029073, 0.00029755, 0.00031281, 0.00032983, 0.00031657,
       0.00030456, 0.00029788, 0.0003881 , 0.0002914 , 0.00029573,
       0.00030885, 0.00029397, 0.0003099 , 0.00030904, 0.00030947]), 'std_score_time': array([3.90492660e-05, 3.23758034e-06, 7.02198371e-06, 2.31286913e-04,
       6.17589724e-05, 1.32656749e-05, 1.22650081e-05, 1.21495263e-05,
       3.81167411e-05, 1.20738709e-05, 1.22655642e-05, 9.40904959e-06,
       8.29041979e-05, 2.60040249e-06, 3.05919932e-06, 2.43140197e-07,
       7.40096740e-06, 3.32899278e-06, 6.00776974e-06, 2.15897206e-06]), 'param_tol': masked_array(data=[0.01, 0.001, 0.01, 0.0001, 0.0001, 0.0001, 0.001, 0.01,
                   0.0001, 0.0001, 0.01, 0.0001, 0.001, 0.01, 0.001,
                   0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['saga', 'sparse_cg', 'sag', 'svd', 'auto', 'cholesky',
                   'svd', 'saga', 'sag', 'sparse_cg', 'sparse_cg', 'auto',
                   'svd', 'svd', 'sparse_cg', 'saga', 'svd', 'saga',
                   'saga', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_random_state': masked_array(data=[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
                   42, 42, 42, 42, 42, 42],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_normalize': masked_array(data=[True, False, False, True, True, False, True, True,
                   False, True, False, False, True, True, True, False,
                   True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[1000, 100, 1000, 1000, 100, 100, 1000, 1000, 500, 1000,
                   1000, 100, 100, 500, 100, 1000, 100, 500, 100, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, False, False, False, False,
                   True, False, True, False, False, False, True, True,
                   True, True, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_copy_X': masked_array(data=[False, False, True, True, True, True, False, True,
                   False, False, True, False, True, True, False, False,
                   True, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.1, 0.1, 0.1, 1, 10, 0.001, 0.1, 0.001, 0.1, 10,
                   100, 0.001, 1, 0.01, 10, 1, 100, 10, 0.1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'cholesky', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 10}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.0001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 10}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 100}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 100}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}], 'split0_test_score': array([0.92005317, 0.92022789, 0.91809277, 0.91865323, 0.91946634,
       0.92211546, 0.91807207, 0.91970798, 0.92009057, 0.91826816,
       0.9199315 , 0.87106066, 0.91807207, 0.91946634, 0.92002495,
       0.91932017, 0.86320416, 0.87522786, 0.92211383, 0.9183357 ]), 'split1_test_score': array([0.94497078, 0.9409403 , 0.94041611, 0.93784927, 0.9383773 ,
       0.9273693 , 0.94084126, 0.93152735, 0.9412371 , 0.94054004,
       0.92311264, 0.85117272, 0.94084126, 0.9383773 , 0.94421925,
       0.92712869, 0.84214783, 0.86198273, 0.92732607, 0.94026883]), 'split2_test_score': array([0.89848542, 0.89678867, 0.89868231, 0.90512095, 0.90089797,
       0.91192873, 0.89397976, 0.90788862, 0.89583843, 0.89500009,
       0.91032401, 0.85926859, 0.89397976, 0.90089797, 0.89654561,
       0.91047062, 0.85051598, 0.87135761, 0.91193501, 0.89532498]), 'split3_test_score': array([0.89680207, 0.89022983, 0.88958363, 0.89111847, 0.89082198,
       0.87676529, 0.89453512, 0.87261841, 0.89059155, 0.89408945,
       0.86732987, 0.82273892, 0.89453512, 0.89082198, 0.89494309,
       0.87705914, 0.81588081, 0.83961981, 0.87668192, 0.89378817]), 'split4_test_score': array([0.9095392 , 0.91206338, 0.9149325 , 0.88633761, 0.9140242 ,
       0.90522608, 0.90901753, 0.91747145, 0.91122431, 0.90990981,
       0.89680581, 0.80366707, 0.90901753, 0.9140242 , 0.91009657,
       0.90213868, 0.75491107, 0.80857819, 0.90523561, 0.91042874]), 'mean_test_score': array([0.91397013, 0.91205001, 0.91234146, 0.9078159 , 0.91271756,
       0.90868097, 0.91128915, 0.90984276, 0.91179639, 0.91156151,
       0.90350077, 0.84158159, 0.91128915, 0.91271756, 0.91316589,
       0.90722346, 0.82533197, 0.85135324, 0.90865849, 0.91162928]), 'std_test_score': array([0.01761928, 0.01794746, 0.01750696, 0.01879806, 0.01627756,
       0.01772475, 0.01734824, 0.02007592, 0.01811175, 0.01712902,
       0.02026972, 0.02476446, 0.01734824, 0.01627756, 0.01805039,
       0.01725592, 0.03847009, 0.02470035, 0.0177453 , 0.01703395]), 'rank_test_score': array([ 1,  6,  5, 15,  4, 13, 10, 12,  7,  9, 17, 19, 10,  3,  2, 16, 20,
       18, 14,  8], dtype=int32)}