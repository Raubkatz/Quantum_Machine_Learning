MLP_RandomizedSearchCV for the ilpd dataset with n_iter=20
CV-score:
0.7124227865477009
test-score:
0.7692307692307693
runtime:
0:00:26.748907
best parameters:
{'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.24305081, 0.19512391, 0.03310065, 0.02729239, 0.31454639,
       0.23030295, 0.08662891, 0.46071391, 0.53066201, 0.28508816,
       0.15593781, 0.34920096, 0.39059138, 0.31812768, 0.3153677 ,
       0.44465141, 0.39753461, 0.28600106, 0.03009405, 0.10454006]), 'std_fit_time': array([0.0280221 , 0.00477216, 0.00412502, 0.00598752, 0.00311656,
       0.00339074, 0.01088727, 0.05181623, 0.061468  , 0.01329113,
       0.01638368, 0.03400379, 0.02033151, 0.03184166, 0.00257643,
       0.03154979, 0.04352399, 0.00235094, 0.00785609, 0.01986142]), 'mean_score_time': array([0.00080791, 0.0008081 , 0.00074329, 0.00077243, 0.00086641,
       0.00103064, 0.00081053, 0.00094981, 0.00118899, 0.00086107,
       0.00076504, 0.00080729, 0.00080504, 0.00082898, 0.00087314,
       0.00086207, 0.00087953, 0.00075803, 0.00071249, 0.0007844 ]), 'std_score_time': array([5.20416151e-05, 1.25115165e-04, 4.87740784e-05, 9.36931507e-05,
       1.35013138e-05, 1.70899755e-04, 1.12803245e-04, 8.99150273e-05,
       2.82374615e-04, 7.50726461e-05, 3.27047031e-05, 1.78186588e-05,
       2.25889997e-05, 1.45757974e-04, 2.53206368e-05, 7.16430970e-06,
       2.84528377e-05, 2.21555396e-05, 6.63596646e-05, 9.67437846e-05]), 'param_solver': masked_array(data=['adam', 'adam', 'sgd', 'sgd', 'adam', 'adam', 'sgd',
                   'adam', 'adam', 'adam', 'sgd', 'adam', 'adam', 'adam',
                   'adam', 'adam', 'adam', 'adam', 'sgd', 'sgd'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[200, 200, 400, 300, 200, 200, 300, 400, 300, 200, 400,
                   300, 400, 400, 200, 300, 300, 300, 200, 400],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=['invscaling', 'constant', 'invscaling', 'invscaling',
                   'constant', 'constant', 'constant', 'adaptive',
                   'adaptive', 'constant', 'adaptive', 'constant',
                   'invscaling', 'adaptive', 'invscaling', 'adaptive',
                   'invscaling', 'invscaling', 'invscaling', 'constant'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_hidden_layer_sizes': masked_array(data=[(100,), (50,), (100,), (50,), (100,), (100,), (50,),
                   (100,), (150,), (150,), (50,), (50,), (50,), (50,),
                   (100,), (100,), (100,), (50,), (100,), (50,)],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.01, 0.01, 0.0001, 0.0001, 0.01, 0.001, 0.0001,
                   0.001, 0.01, 0.0001, 0.0001, 0.001, 0.01, 0.0001, 0.01,
                   0.01, 0.01, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_activation': masked_array(data=['relu', 'relu', 'relu', 'relu', 'tanh', 'relu', 'tanh',
                   'tanh', 'tanh', 'relu', 'tanh', 'tanh', 'tanh', 'relu',
                   'tanh', 'tanh', 'tanh', 'relu', 'relu', 'relu'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (150,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}], 'split0_test_score': array([0.72340426, 0.72340426, 0.29787234, 0.5106383 , 0.72340426,
       0.72340426, 0.70212766, 0.72340426, 0.72340426, 0.71276596,
       0.70212766, 0.72340426, 0.72340426, 0.72340426, 0.72340426,
       0.72340426, 0.72340426, 0.72340426, 0.70212766, 0.70212766]), 'split1_test_score': array([0.69892473, 0.69892473, 0.70967742, 0.29032258, 0.67741935,
       0.67741935, 0.70967742, 0.67741935, 0.67741935, 0.67741935,
       0.70967742, 0.67741935, 0.68817204, 0.67741935, 0.67741935,
       0.67741935, 0.67741935, 0.68817204, 0.70967742, 0.70967742]), 'split2_test_score': array([0.70967742, 0.70967742, 0.33333333, 0.29032258, 0.69892473,
       0.72043011, 0.70967742, 0.70967742, 0.72043011, 0.70967742,
       0.70967742, 0.69892473, 0.69892473, 0.70967742, 0.70967742,
       0.68817204, 0.69892473, 0.69892473, 0.29032258, 0.70967742]), 'split3_test_score': array([0.72043011, 0.70967742, 0.51612903, 0.70967742, 0.69892473,
       0.7311828 , 0.70967742, 0.72043011, 0.72043011, 0.72043011,
       0.70967742, 0.72043011, 0.7311828 , 0.72043011, 0.72043011,
       0.72043011, 0.72043011, 0.7311828 , 0.56989247, 0.70967742]), 'split4_test_score': array([0.69892473, 0.69892473, 0.30107527, 0.30107527, 0.69892473,
       0.69892473, 0.69892473, 0.68817204, 0.72043011, 0.69892473,
       0.69892473, 0.69892473, 0.69892473, 0.69892473, 0.69892473,
       0.69892473, 0.69892473, 0.69892473, 0.30107527, 0.69892473]), 'mean_test_score': array([0.71027225, 0.70812171, 0.43161748, 0.42040723, 0.69951956,
       0.71027225, 0.70601693, 0.70382064, 0.71242279, 0.70384351,
       0.70601693, 0.70382064, 0.70812171, 0.70597117, 0.70597117,
       0.7016701 , 0.70382064, 0.70812171, 0.51461908, 0.70601693]), 'std_test_score': array([0.01032974, 0.00902846, 0.16065387, 0.16727405, 0.01455994,
       0.01960082, 0.00459616, 0.01808646, 0.01753958, 0.01490765,
       0.00459616, 0.01675924, 0.016325  , 0.01668273, 0.01668273,
       0.01790053, 0.01675924, 0.016325  , 0.18556522, 0.00459616]), 'rank_test_score': array([ 2,  4, 19, 20, 17,  2,  7, 13,  1, 12,  7, 13,  4, 10, 10, 16, 13,
        4, 18,  7], dtype=int32)}