Ridge_RandomizedSearchCV for the wine dataset with n_iter=20
CV-score:
0.8746256111219701
test-score:
0.8781794751399887
runtime:
0:00:00.496771
best parameters:
{'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.00114269, 0.00104575, 0.00199947, 0.0059504 , 0.00042305,
       0.00035906, 0.00040455, 0.00165586, 0.00823135, 0.00076051,
       0.00056219, 0.00036106, 0.000419  , 0.00041256, 0.00096231,
       0.02653303, 0.00061932, 0.01399293, 0.00307045, 0.01401238]), 'std_fit_time': array([9.54602981e-05, 7.23062509e-05, 2.47246389e-05, 9.37039804e-03,
       1.01852529e-04, 2.38418579e-06, 1.06553635e-05, 2.83990056e-05,
       1.26560649e-04, 1.78476014e-05, 4.60529416e-05, 1.33825689e-05,
       1.35799003e-05, 1.08322878e-05, 2.21354157e-05, 3.04148764e-04,
       1.01016644e-04, 1.47183535e-03, 7.68953107e-05, 7.28871409e-04]), 'mean_score_time': array([0.0003612 , 0.00040708, 0.00030656, 0.00071106, 0.00029979,
       0.0002974 , 0.00030308, 0.00031223, 0.00032024, 0.00030532,
       0.00029812, 0.00029459, 0.0003129 , 0.0003222 , 0.00030437,
       0.00049233, 0.000316  , 0.00039744, 0.00036273, 0.0005362 ]), 'std_score_time': array([8.06858634e-05, 5.99857734e-05, 1.91567511e-06, 4.62507429e-04,
       5.23566331e-06, 9.74732599e-06, 3.88380865e-06, 1.80065227e-06,
       4.12787878e-06, 4.70017301e-06, 1.66278799e-06, 1.74290341e-06,
       1.00119907e-05, 1.11099988e-05, 4.30370301e-06, 4.00750356e-05,
       2.13048580e-05, 8.28345887e-05, 3.39629253e-05, 1.04883799e-04]), 'param_tol': masked_array(data=[0.01, 0.001, 0.01, 0.0001, 0.0001, 0.0001, 0.001, 0.01,
                   0.0001, 0.0001, 0.01, 0.0001, 0.001, 0.01, 0.001,
                   0.0001, 0.0001, 0.0001, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['saga', 'sparse_cg', 'sag', 'svd', 'auto', 'cholesky',
                   'svd', 'saga', 'sag', 'sparse_cg', 'sparse_cg', 'auto',
                   'svd', 'svd', 'sparse_cg', 'saga', 'svd', 'saga',
                   'saga', 'saga'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_random_state': masked_array(data=[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
                   42, 42, 42, 42, 42, 42],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_normalize': masked_array(data=[True, False, False, True, True, False, True, True,
                   False, True, False, False, True, True, True, False,
                   True, False, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[1000, 100, 1000, 1000, 100, 100, 1000, 1000, 500, 1000,
                   1000, 100, 100, 500, 100, 1000, 100, 500, 100, 500],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fit_intercept': masked_array(data=[True, True, True, True, False, False, False, False,
                   True, False, True, False, False, False, True, True,
                   True, True, False, False],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_copy_X': masked_array(data=[False, False, True, True, True, True, False, True,
                   False, False, True, False, True, True, False, False,
                   True, False, False, True],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.1, 0.1, 0.1, 1, 10, 0.001, 0.1, 0.001, 0.1, 10,
                   100, 0.001, 1, 0.01, 10, 1, 100, 10, 0.1],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'cholesky', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 10}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'saga', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}, {'tol': 0.0001, 'solver': 'sag', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.001}, {'tol': 0.0001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 1000, 'fit_intercept': False, 'copy_X': False, 'alpha': 0.1}, {'tol': 0.01, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': True, 'alpha': 10}, {'tol': 0.0001, 'solver': 'auto', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 100}, {'tol': 0.001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.001}, {'tol': 0.01, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 1}, {'tol': 0.001, 'solver': 'sparse_cg', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': False, 'alpha': 0.01}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 1000, 'fit_intercept': True, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'svd', 'random_state': 42, 'normalize': True, 'max_iter': 100, 'fit_intercept': True, 'copy_X': True, 'alpha': 1}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': True, 'copy_X': False, 'alpha': 100}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 100, 'fit_intercept': False, 'copy_X': False, 'alpha': 10}, {'tol': 0.0001, 'solver': 'saga', 'random_state': 42, 'normalize': False, 'max_iter': 500, 'fit_intercept': False, 'copy_X': True, 'alpha': 0.1}], 'split0_test_score': array([0.92055593, 0.90168682, 0.51810129, 0.91396194, 0.88308271,
       0.88384028, 0.88153561, 0.17083618, 0.72658477, 0.87087303,
       0.44052178, 0.86094605, 0.88153561, 0.88308271, 0.92019771,
       0.72588349, 0.81560721, 0.62045953, 0.25477579, 0.37097407]), 'split1_test_score': array([ 0.83524522,  0.80815978,  0.26563364,  0.83626237,  0.75182857,
        0.74862293,  0.75092607,  0.00587447,  0.46324065,  0.76278158,
        0.59537975,  0.67366221,  0.75092607,  0.75182857,  0.83559503,
        0.4624688 ,  0.77243941,  0.35551411, -0.09080608, -0.00342697]), 'split2_test_score': array([0.91718197, 0.88208358, 0.43793738, 0.9068649 , 0.9041518 ,
       0.89879311, 0.90215389, 0.27570148, 0.65177924, 0.88181969,
       0.35533454, 0.86945804, 0.90215389, 0.9041518 , 0.91853141,
       0.65094306, 0.83864762, 0.53925617, 0.39598146, 0.47270374]), 'split3_test_score': array([0.87158661, 0.8679128 , 0.42131528, 0.86714506, 0.85281018,
       0.84300236, 0.85153071, 0.16846545, 0.5901639 , 0.83435418,
       0.35221041, 0.77577425, 0.85153071, 0.85281018, 0.87301135,
       0.58956112, 0.81325243, 0.50219502, 0.29668454, 0.37722037]), 'split4_test_score': array([0.82505722, 0.84099923, 0.47454605, 0.84889379, 0.77746308,
       0.82988441, 0.7497689 , 0.33551025, 0.67529223, 0.81656528,
       0.38261127, 0.81513174, 0.7497689 , 0.77746308, 0.8162039 ,
       0.67453489, 0.81271586, 0.57518647, 0.39956138, 0.47806694]), 'mean_test_score': array([0.87392539, 0.86016844, 0.42350673, 0.87462561, 0.83386727,
       0.84082862, 0.82718303, 0.19127757, 0.62141216, 0.83327875,
       0.42521155, 0.79899446, 0.82718303, 0.83386727, 0.87270788,
       0.62067827, 0.81053251, 0.51852226, 0.25123942, 0.33910763]), 'std_test_score': array([0.03983783, 0.0326692 , 0.08566224, 0.03090807, 0.05938466,
       0.05260471, 0.06476992, 0.11246601, 0.09042254, 0.04247329,
       0.09079468, 0.07114897, 0.06476992, 0.05938466, 0.04224982,
       0.09042472, 0.02135164, 0.09041036, 0.18001253, 0.1771754 ]), 'rank_test_score': array([ 2,  4, 17,  1,  7,  5,  9, 20, 13,  8, 16, 12,  9,  6,  3, 14, 11,
       15, 19, 18], dtype=int32)}