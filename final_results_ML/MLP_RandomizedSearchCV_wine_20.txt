MLP_RandomizedSearchCV for the wine dataset with n_iter=20
CV-score:
0.9366995073891626
test-score:
1.0
runtime:
0:00:10.477420
best parameters:
{'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}
RandomizedSearchCV.cv_results:
{'mean_fit_time': array([0.09611707, 0.01246767, 0.01186972, 0.02218604, 0.12376919,
       0.09227395, 0.02176223, 0.21921358, 0.25338016, 0.10316381,
       0.10223989, 0.15386891, 0.21196208, 0.00794168, 0.1250392 ,
       0.20177732, 0.20491161, 0.01446233, 0.00959139, 0.03898182]), 'std_fit_time': array([0.04003401, 0.00500629, 0.0022226 , 0.00874371, 0.00298004,
       0.03480553, 0.01946196, 0.10395974, 0.00344596, 0.04239876,
       0.06397132, 0.00364047, 0.00638831, 0.001697  , 0.00351136,
       0.00373053, 0.0054834 , 0.00554072, 0.00182965, 0.03002298]), 'mean_score_time': array([0.00041847, 0.00048628, 0.0003633 , 0.00037217, 0.00042915,
       0.0004312 , 0.00038338, 0.00047169, 0.00050836, 0.00044689,
       0.00039983, 0.00039477, 0.00044847, 0.00037532, 0.00047374,
       0.00043817, 0.00047598, 0.00045509, 0.00036349, 0.00043139]), 'std_score_time': array([5.04806850e-05, 1.30625064e-04, 1.95127219e-05, 5.38726814e-05,
       7.73593895e-06, 2.68750093e-05, 1.02146822e-04, 9.06785315e-05,
       4.24450430e-05, 3.76026539e-05, 3.02876063e-05, 4.38430958e-06,
       7.16776820e-05, 3.01545877e-05, 7.19979897e-05, 2.15482918e-05,
       3.61081298e-05, 7.89784566e-05, 1.82788545e-05, 5.08429171e-05]), 'param_solver': masked_array(data=['adam', 'adam', 'sgd', 'sgd', 'adam', 'adam', 'sgd',
                   'adam', 'adam', 'adam', 'sgd', 'adam', 'adam', 'adam',
                   'adam', 'adam', 'adam', 'adam', 'sgd', 'sgd'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[200, 200, 400, 300, 200, 200, 300, 400, 300, 200, 400,
                   300, 400, 400, 200, 300, 300, 300, 200, 400],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_learning_rate': masked_array(data=['invscaling', 'constant', 'invscaling', 'invscaling',
                   'constant', 'constant', 'constant', 'adaptive',
                   'adaptive', 'constant', 'adaptive', 'constant',
                   'invscaling', 'adaptive', 'invscaling', 'adaptive',
                   'invscaling', 'invscaling', 'invscaling', 'constant'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_hidden_layer_sizes': masked_array(data=[(100,), (50,), (100,), (50,), (100,), (100,), (50,),
                   (100,), (150,), (150,), (50,), (50,), (50,), (50,),
                   (100,), (100,), (100,), (50,), (100,), (50,)],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_alpha': masked_array(data=[0.01, 0.01, 0.01, 0.0001, 0.0001, 0.01, 0.001, 0.0001,
                   0.001, 0.01, 0.0001, 0.0001, 0.001, 0.01, 0.0001, 0.01,
                   0.01, 0.01, 0.0001, 0.0001],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_activation': masked_array(data=['relu', 'relu', 'relu', 'relu', 'tanh', 'relu', 'tanh',
                   'tanh', 'tanh', 'relu', 'tanh', 'tanh', 'tanh', 'relu',
                   'tanh', 'tanh', 'tanh', 'relu', 'relu', 'relu'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (150,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'constant', 'hidden_layer_sizes': (150,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 400, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'adam', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'adaptive', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.01, 'activation': 'tanh'}, {'solver': 'adam', 'max_iter': 300, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (50,), 'alpha': 0.01, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 200, 'learning_rate': 'invscaling', 'hidden_layer_sizes': (100,), 'alpha': 0.0001, 'activation': 'relu'}, {'solver': 'sgd', 'max_iter': 400, 'learning_rate': 'constant', 'hidden_layer_sizes': (50,), 'alpha': 0.0001, 'activation': 'relu'}], 'split0_test_score': array([1.        , 0.5862069 , 0.31034483, 0.4137931 , 0.89655172,
       0.72413793, 0.51724138, 1.        , 0.93103448, 0.96551724,
       0.4137931 , 0.96551724, 0.93103448, 0.4137931 , 0.93103448,
       0.93103448, 0.96551724, 0.        , 0.4137931 , 0.27586207]), 'split1_test_score': array([0.4137931 , 0.4137931 , 0.31034483, 0.31034483, 0.82758621,
       0.75862069, 0.31034483, 0.93103448, 0.93103448, 0.89655172,
       0.51724138, 0.93103448, 0.93103448, 0.4137931 , 0.89655172,
       0.93103448, 0.93103448, 0.31034483, 0.31034483, 0.5862069 ]), 'split2_test_score': array([0.96428571, 0.32142857, 0.39285714, 0.32142857, 0.92857143,
       0.92857143, 0.67857143, 0.96428571, 0.96428571, 0.96428571,
       0.67857143, 0.92857143, 0.96428571, 0.39285714, 0.96428571,
       0.96428571, 0.96428571, 0.39285714, 0.32142857, 0.32142857]), 'split3_test_score': array([0.85714286, 0.35714286, 0.32142857, 0.57142857, 0.82142857,
       0.85714286, 0.71428571, 0.53571429, 0.89285714, 0.85714286,
       0.39285714, 0.85714286, 0.92857143, 0.75      , 0.85714286,
       0.89285714, 0.89285714, 0.39285714, 0.32142857, 0.28571429]), 'split4_test_score': array([0.89285714, 0.28571429, 0.32142857, 0.32142857, 0.78571429,
       0.89285714, 0.60714286, 0.92857143, 0.92857143, 0.64285714,
       0.60714286, 0.67857143, 0.92857143, 0.32142857, 0.82142857,
       0.92857143, 0.92857143, 0.64285714, 0.39285714, 0.32142857]), 'mean_test_score': array([0.82561576, 0.39285714, 0.33128079, 0.38768473, 0.85197044,
       0.83226601, 0.56551724, 0.87192118, 0.92955665, 0.86527094,
       0.52192118, 0.87216749, 0.93669951, 0.45837438, 0.89408867,
       0.92955665, 0.9364532 , 0.34778325, 0.35197044, 0.35812808]), 'std_test_score': array([0.21201532, 0.10552685, 0.03118464, 0.09920148, 0.05248329,
       0.07833287, 0.14428411, 0.17010238, 0.0226199 , 0.11863026,
       0.10970245, 0.10302046, 0.01383702, 0.14971115, 0.05087862,
       0.0226199 , 0.02687552, 0.20663337, 0.04264286, 0.11552065]), 'rank_test_score': array([11, 15, 20, 16,  9, 10, 12,  7,  3,  8, 13,  6,  1, 14,  5,  3,  2,
       19, 18, 17], dtype=int32)}